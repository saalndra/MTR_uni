import numpy as np

# Матриця прибутків
F = np.array([
    [200, 300, 150],
    [750, 250, 350],
    [500, 800, 250],
    [800, 500, 450]
])

# Ймовірності станів економічного середовища
P = np.array([0.1, 0.5, 0.4])

# Крок 1: Обчислення очікуваного прибутку для кожного варіанту рішення
expected_profits = F @ P

# Крок 2: Обчислення дисперсії для кожного варіанту рішення
# Дисперсія обчислюється як сума квадратів відхилень від очікуваного значення, зважена на ймовірності.
variances = np.sum(P * (F - expected_profits[:, np.newaxis]) ** 2, axis=1)

# Вектор пріоритетів
V = np.array([2, 1])

# Крок 3: Обчислення компромісної оцінки для кожного варіанту рішення
# Для кожного варіанту розраховуємо зважену суму очікуваних збитків та дисперсії.
compromise_scores = V[0] * expected_profits + V[1] * variances

# Знаходимо індекс найкращого варіанту рішення
best_decision_index = np.argmin(compromise_scores)
best_decision = best_decision_index + 1  # Додаємо 1, щоб відповідало нумерації з завдання

# Виведення результатів
print("Очікувані прибутки для кожного варіанту:", expected_profits)
print("Дисперсії для кожного варіанту:", variances)
print("Компромісні оцінки для кожного варіанту:", compromise_scores)
print("Найкращий варіант рішення:", best_decision)
